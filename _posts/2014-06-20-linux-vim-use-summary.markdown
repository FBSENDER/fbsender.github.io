---
layout: post
title: "vim使用总结"
categories: linux
date: 2014-06-20
---

## vim常用指令
* **i** 在当前位置插入 
* **a** 在当前字符后插入
* **o** 在当前行后插入新行
* **O** 在当前行前插入新行
* **s** 删除当前字符，再插入
* **x** 删除当前字符
* **dd** 删除当前行 删除的内容会被放在默认的剪切板里
* **yy** 复制当前行
* **:w** 存盘
* **:saveas + path** 另存为
* **p** 在当前位置后粘贴
* **P** 在当前位置前面粘贴
* **:q** 退出vim
* **cw** 替换当前word并进行插入
* **hjkl** 对应光标的左、下、上、右移动
* 0 → 数字零，到行头
* ^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）
* $ → 到本行行尾
* g_ → 到本行最后一个不是blank字符的位置。
* /pattern → 搜索 pattern的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个）
* **50G** 到第50行
* **:50** 到第50行
* **gg** 到首行
* **G** 到尾行
* 关于tab的使用[tab wiki](http://vim.wikia.com/wiki/Using_tab_pages)
* **:split** 上下分屏
* **:vsplit** 左右分屏
* **w** 到下一个单词的开头
* **e** 到下一个单词的结尾
* **W** 到下一个单词的开头 由blank分隔
* **E** 到下一个单词的结尾 由blank分隔
* **%** 匹配括号移动，包括 （ [ {
* 星号与井号 匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）

你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：
<start position><command><end position>
例如 0y$ 命令意味着：
0 → 先到行头
y → 从这里开始拷贝
$ → 拷贝到本行最后一个字符
你可可以输入 ye，从当前位置拷贝到本单词的最后一个字符。
你也可以输入 y2/foo 来拷贝2个 “foo” 之间的字符串。
还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：
d (删除 )
v (可视化的选择)
gU (变大写)
gu (变小写)
等等

fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。
t, → 到逗号前的第一个字符。逗号可以变成其它字符。
3fa → 在当前行查找第三个出现的a。
F 和 T → 和 f 和 t 一样，只不过是相反方向。
还有一个很有用的命令是 dt" → 删除所有的内容，直到遇到双引号—— "。

<c + n> <c + p> 代码自动补齐
可视模式下I插入字符后[ESC] 将对所有行插入

前面，我们看到了 <C-v>的示例 （在Windows下应该是<C-q>），我们可以使用 v 和 V。一但被选好了，你可以做下面的事：
J → 把所有的行连接起来（变成一行）
< 或 > → 左右缩进
= → 自动给缩进 

宏录制： qa 操作序列 q, @a, @@

qa 把你的操作记录在寄存器 a。
于是 @a 会replay被录制的宏。
@@ 是一个快捷键用来replay最新录制的宏。
示例
在一个只有一行且这一行只有“1”的文本中，键入如下命令：
qaYp<C-a>q→
qa 开始录制
Yp 复制行.
<C-a> 增加1.
q 停止录制.
@a → 在1下面写下 2
@@ → 在2 正面写下3
现在做 100@@ 会创建新的100行，并把数据增加到 103.

区域选择 <action>a<object> 或 <action>i<object>

在visual 模式下，这些命令很强大，其命令格式为
<action>a<object> 和 <action>i<object>
action可以是任何的命令，如 d (删除), y (拷贝), v (可以视模式选择)。
object 可能是： w 一个单词， W 一个以空格为分隔的单词， s 一个句字， p 一个段落。也可以是一个特别的字符："、 '、 )、 }、 ]。
假设你有一个字符串 (map (+) ("foo")).而光标键在第一个 o 的位置。
vi" → 会选择 foo.
va" → 会选择 "foo".
vi) → 会选择 "foo".
va) → 会选择("foo").
v2i) → 会选择 map (+) ("foo")
v2a) → 会选择 (map (+) ("foo"))
